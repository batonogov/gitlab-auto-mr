name: Update Badges

# Note: This workflow requires GIST_ID variable to be set in repository variables
# Create a public gist and add its ID to repository variables as GIST_ID
# Example: https://gist.github.com/username/abc123def456 -> GIST_ID = abc123def456

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_run:
    workflows: ["CI", "Docker Image CI Linux ghcr.io"]
    types: [completed]

jobs:
  update-badges:
    name: Update Status Badges
    runs-on: ubuntu-latest
    if: (github.repository_owner == github.actor || github.event_name == 'workflow_run') && vars.GIST_ID != ''
    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Calculate coverage
        id: coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ steps.coverage.outputs.coverage }}%
          color: ${{ steps.coverage.outputs.coverage > 80 && 'brightgreen' || steps.coverage.outputs.coverage > 60 && 'yellow' || 'red' }}
        if: vars.GIST_ID != ''
        continue-on-error: true

      - name: Create build badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: build.json
          label: Build
          message: ${{ job.status == 'success' && 'passing' || 'failing' }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
        if: vars.GIST_ID != ''
        continue-on-error: true

      - name: Get Go version
        id: go-version
        run: |
          GO_VERSION=$(go version | cut -d' ' -f3 | sed 's/go//')
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Create Go version badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: go-version.json
          label: Go
          message: ${{ steps.go-version.outputs.version }}
          color: blue
        if: vars.GIST_ID != ''
        continue-on-error: true

      - name: Get latest release
        id: release
        run: |
          RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [ "$RELEASE" = "null" ]; then
            RELEASE="v0.0.0"
          fi
          echo "version=$RELEASE" >> $GITHUB_OUTPUT

      - name: Create release badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: release.json
          label: Release
          message: ${{ steps.release.outputs.version }}
          color: blue
        if: vars.GIST_ID != ''
        continue-on-error: true

      - name: Create license badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: license.json
          label: License
          message: MIT
          color: green
        if: vars.GIST_ID != ''
        continue-on-error: true

  docker-badge:
    name: Update Docker Badge
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.name == 'Docker Image CI Linux ghcr.io' && vars.GIST_ID != ''
    continue-on-error: true

    steps:
      - name: Create Docker badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ vars.GIST_ID }}
          filename: docker.json
          label: Docker
          message: available
          color: blue
        continue-on-error: true
