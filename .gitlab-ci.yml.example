# GitLab CI Example for gitlab-auto-mr
# Copy this file to .gitlab-ci.yml in your project root

stages:
  - build
  - test
  - create-mr

variables:
  # Set these in your GitLab project's CI/CD Variables:
  # GITLAB_PRIVATE_TOKEN: "your-gitlab-token-with-api-scope"
  # GITLAB_USER_ID: "your-gitlab-user-id"

  GITLAB_AUTO_MR_IMAGE: "ghcr.io/batonogov/gitlab-auto-mr:latest"

# Example build stage
build:
  stage: build
  image: golang:1.24-alpine3.22
  script:
    - echo "Building application..."
    - go mod download
    - go build -o app .
  artifacts:
    paths:
      - app
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

# Example test stage
test:
  stage: test
  image: golang:1.24-alpine3.22
  script:
    - echo "Running tests..."
    - go test -v ./...
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

# Basic MR creation - runs for all non-main branches
create_mr:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "Draft"
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"

# Advanced MR creation for feature branches
create_feature_mr:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "Ready for Review" \
        --description .gitlab/merge_request_templates/feature.md \
        --remove-branch \
        --squash-commits \
        --use-issue-name \
        --allow-collaboration
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^feature\// && $CI_PIPELINE_SOURCE != "merge_request_event"

# Release MR creation
create_release_mr:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  variables:
    # Override for release team
    GITLAB_USER_ID: "12345,67890"  # Release managers
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "Release" \
        --title "Release $(echo $CI_COMMIT_BRANCH | sed 's/release\///')" \
        --description .gitlab/merge_request_templates/release.md \
        --squash-commits \
        --reviewer-id "11111,22222"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\// && $CI_PIPELINE_SOURCE != "merge_request_event"

# Hotfix MR creation
create_hotfix_mr:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "üî• HOTFIX" \
        --title "Hotfix: $(echo $CI_COMMIT_BRANCH | sed 's/hotfix[\/\-]//')" \
        --reviewer-id "12345,67890" \
        --squash-commits
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^hotfix/ && $CI_PIPELINE_SOURCE != "merge_request_event"

# Check if MR exists (dry run)
check_mr_exists:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --mr-exists
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^check\// && $CI_PIPELINE_SOURCE != "merge_request_event"

# Manual MR creation
manual_create_mr:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "Manual Review" \
        --title "Manual MR: $CI_COMMIT_TITLE"
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH != "main"

# MR creation with error handling
create_mr_safe:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      # Try to create MR, but don't fail pipeline if it already exists
      if ./gitlab-auto-mr --target-branch main --commit-prefix "Draft"; then
        echo "‚úÖ MR created successfully"
      else
        echo "‚ÑπÔ∏è MR creation failed (probably already exists)"
        exit 0  # Don't fail the pipeline
      fi
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"

# Multi-target MR creation
create_mr_to_develop:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch develop \
        --commit-prefix "Feature"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^feature\// && $CI_PIPELINE_SOURCE != "merge_request_event"

# Self-hosted GitLab with custom SSL
create_mr_self_hosted:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      ./gitlab-auto-mr \
        --target-branch main \
        --commit-prefix "Draft" \
        --insecure
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
  # Only use --insecure for self-hosted GitLab with custom certificates

# Conditional MR based on file changes
create_mr_on_go_changes:
  stage: create-mr
  image: $GITLAB_AUTO_MR_IMAGE
  script:
    - |
      # Check if Go files were changed
      if git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep -E "\.(go|mod|sum)$"; then
        echo "Go files changed, creating MR..."
        ./gitlab-auto-mr \
          --target-branch main \
          --commit-prefix "Go Changes" \
          --reviewer-id "12345"
      else
        echo "No Go files changed, skipping MR creation"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
